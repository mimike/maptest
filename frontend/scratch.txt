step 1. npm install --save-dev @types/react @types/react-dom
step 2. npx tsc --init (tsconfig.json in frontend)
on line 12 "jsx": "react-jsx"

tsconfig.dev.json
type this:

{
    "extends": "./tsconfig.json",
    "compilerOptions": {
        "jsx": "react-jsxdev"
    }
}

step 3.

const reportWebVitals = (onPerfEntry: any) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};
babel ?? webpack.config.js
npm i @babel/preset-typescript

export default reportWebVitals;


npm install @material-ui/icons
npm install @material-ui/core
npm install node-fetch   // to do 3rd party fetch

npm install --save react-router-dom
npm install --save-dev @types/react @types/react-dom
npm install --save-dev typescript @types/react @types/react-dom

npx tsc --init (tsconfig.json in frontend)

create a tsconfig.dev.json file
{
    "extends": "./tsconfig.json",
    "compilerOptions": {
        "jsx": "react-jsxdev"
    }
}
https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=AIzaSyDztJTZmlpuFXqV1NQRAeKJNSmpk54-bzE&radius=5000&type=lodging&location=41.661129%2C+-91.530167&rankby=prominence

https://maps.googleapis.com/maps/api/place/nearbysearch/json?key=AIzaSyDztJTZmlpuFXqV1NQRAeKJNSmpk54-bzE&radius=5000&type=lodging&location=41.6611%2C+-91.530167&rankby=prominence




// import { ChangeEvent } from "react";
// import usePlacesAutocomplete from "use-places-autocomplete";
// import {
//   Combobox,
//   ComboboxInput,
//   ComboboxPopover,
//   ComboboxList,
//   ComboboxOption
// } from "@reach/combobox";


// function PlacesAutocomplete() {
//   const {
//     ready,
//     value,
//     suggestions: { status, data },
//     setValue
//   } = usePlacesAutocomplete();

//   const handleInput = (e)=> {
//     setValue(e.target.value);
//   };

//   const handleSelect = (val)=> {
//     setValue(val, false);
//   };
//   const renderSuggestions = () => {
//       const suggestions = data.map(({ place_id, description }) => (
//           <ComboboxOption key={place_id} value={description} />
//           ));

// console.log("28", ready, value, suggestions)
//           return (
//       <>
//         {suggestions}
//         <li className="logo">
//           <img
//             src="https://developers.google.com/maps/documentation/images/powered_by_google_on_white.png"
//             alt="Powered by Google"
//           />
//         </li>
//       </>
//     );
//   };

//   return (
//     <div className="App">
//       <h1 className="title">USE-PLACES-AUTOCOMPLETE</h1>
//       <p className="subtitle">
//         React hook for Google Maps Places Autocomplete.
//       </p>
//       <Combobox onSelect={handleSelect} aria-labelledby="demo">
//         <ComboboxInput
//           style={{ width: 300, maxWidth: "90%" }}
//           value={value}
//           onChange={handleInput}
//           disabled={!ready}
//         />
//         <ComboboxPopover>
//           <ComboboxList>{status === "OK" && renderSuggestions()}</ComboboxList>
//         </ComboboxPopover>
//       </Combobox>
//     </div>
//   );
// }
//   export default PlacesAutocomplete;
const useStyles = makeStyles((theme) => ({
    root: {
      display: 'flex',
      '& > *': {
        margin: theme.spacing(1),
      },
    },
    small: {
      width: theme.spacing(3),
      height: theme.spacing(3),
    },
    large: {
      width: theme.spacing(7),
      height: theme.spacing(7),
    },
  }));


type AppProps = {
  message: string;
  count: number;
  disabled: boolean;
  /** array of a type! */
  names: string[];
  /** string literals to specify exact string values, with a union type to join them together */
  status: "waiting" | "success";
  /** any object as long as you dont use its properties (NOT COMMON but useful as placeholder) */
  obj: object;
  obj2: {}; // almost the same as `object`, exactly the same as `Object`
  /** an object with any number of properties (PREFERRED) */
  obj3: {
    id: string;
    title: string;
  };
  /** array of objects! (common) */
  objArr: {
    id: string;
    title: string;
  }[];
  /** a dict object with any number of properties of the same type */
  dict1: {
    [key: string]: MyTypeHere;
  };
  dict2: Record<string, MyTypeHere>; // equivalent to dict1
  /** any function as long as you don't invoke it (not recommended) */
  onSomething: Function;
  /** function that doesn't take or return anything (VERY COMMON) */
  onClick: () => void;
  /** function with named prop (VERY COMMON) */
  onChange: (id: number) => void;
  /** alternative function type syntax that takes an event (VERY COMMON) */
  onClick(event: React.MouseEvent<HTMLButtonElement>): void;
  /** an optional prop (VERY COMMON!) */
  optional?: OptionalType;
};
